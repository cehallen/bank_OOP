# OOP Fundamentals 1
# Bank transactions challenge

require 'csv'
require 'pry'

class BankTransaction

  attr_reader :date, :amount, :description

  def initialize(date, amount, description)
    @date = date
    @amount = amount
    @description = description
  end

  def credit_or_debit
    if @amount < 0
      "DEBIT"
    else
      "CREDIT"
    end
  end

  def summary
    "#{sprintf("$%.2f", @amount.abs)} #{self.credit_or_debit} #{@date} - #{@description}"
  end
end


class BankAccount

  attr_reader :transactions, :account, :balance

  def initialize(name, starting_balance)
    @account = name
    @balance = starting_balance
    @transactions = []
  end

  def add_transactions(transaction)
    @transactions << transaction
  end

  def current_balance
    bal = @balance
    @transactions.each do |transaction|
      bal += transaction.amount
    end
    bal
  end

  def summary
      puts "=== #{@account} ==="
      puts "Starting Balance: #{sprintf("$%.2f", @balance)}"
      puts "Ending Balance: #{sprintf("$%.2f", self.current_balance)}"
      @transactions.each do |trans|
        puts trans.summary
      end
  end
end

accounts = {}
CSV.foreach('balances.csv', headers: true) do |account_line|
  bal = account_line["Balance"].to_f
  accounts[account_line["Account"]] = BankAccount.new(account_line["Account"], bal)
end


CSV.foreach('bank_data.csv', headers: true) do |trans_line|
  amt = trans_line["Amount"].to_f
  accounts[trans_line["Account"]].add_transactions(BankTransaction.new(trans_line["Date"], amt, trans_line["Description"]))
end




